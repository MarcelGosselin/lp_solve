name: 'Release'

on:
  # While testing the workflow it is at every push or manually
  - push
  - workflow_dispatch 
  # push:
  #   tags:
  #     - 'v*.*.*'

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      LP_VERSION: ${{ steps.extract-version.outputs.LP_VERSION }}
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Extract Version Number
      id: extract-version
      # lp_lib.h contains the version information as:
      #define MAJORVERSION             5
      #define MINORVERSION             5
      #define RELEASE                  2
      #define BUILD                   14
      run: |
        LP_MAJOR=$( sed -n -E 's/^\s*#define\s+MAJORVERSION\s+([0-9]+).*$/\1/p' $GITHUB_WORKSPACE/lp_lib.h )
        LP_MINOR=$( sed -n -E 's/^\s*#define\s+MINORVERSION\s+([0-9]+).*$/\1/p' $GITHUB_WORKSPACE/lp_lib.h )
        LP_RELEASE=$( sed -n -E 's/^\s*#define\s+RELEASE\s+([0-9]+).*$/\1/p' $GITHUB_WORKSPACE/lp_lib.h )
        LP_BUILD=$( sed -n -E 's/^\s*#define\s+BUILD\s+([0-9]+).*$/\1/p' $GITHUB_WORKSPACE/lp_lib.h )
        LP_VERSION=$LP_MAJOR.$LP_MINOR.$LP_RELEASE.$LP_BUILD
        echo "Version is $LP_VERSION"
        echo "LP_VERSION=$LP_VERSION" >> "$GITHUB_OUTPUT"
  
  build-ux64:
    needs: determine-version
    runs-on: ubuntu-latest

    env:
      LP_VERSION: ${{ needs.determine-version.outputs.LP_VERSION }}
      PLATFORM_FOLDER: 'ux64'
      # set glpkdir to where glpk is located, used in bfp/bfp_GLPK/ccc
      glpkdir: ${{ github.workspace }}/dependencies/glpk

    steps:

    - name: Checkout
      uses: actions/checkout@v5

    - name: Install missing dependencies
      run: |
        set -v # echo commands
        
        sudo apt-get update
        sudo apt-get install -y \
            octave-dev

        # bfp/bfp_GLPK/ccc expects glpk to be installed in dependencies/glpk
        mkdir -p $glpkdir
        curl -s -L https://slackware.cs.utah.edu/pub/gnu/glpk/glpk-4.13.tar.gz | tar -xvz -C $glpkdir --strip-components=1

    - name: Build lp_solve_${{ env.LP_VERSION }}_dev_${{ env.PLATFORM_FOLDER }}.tar.gz
      run: |
        set -v # echo commands
        
        PACKAGE_FOLDER=output/dev_${{ env.PLATFORM_FOLDER }}
        mkdir -p $PACKAGE_FOLDER
        PACKAGE_FOLDER=$( realpath $PACKAGE_FOLDER )

        pushd lpsolve55 > /dev/null
        echo "Building lpsolve55 library for platform ${{ env.PLATFORM_FOLDER }}"
        sh ccc
        cp bin/${{ env.PLATFORM_FOLDER }}/* $PACKAGE_FOLDER
        popd > /dev/null

        echo "Packaging lpsolve55 library for platform ${{ env.PLATFORM_FOLDER }}"
        cp lp_Hash.h lp_lib.h lp_matrix.h lp_mipbb.h lp_SOS.h lp_types.h lp_utils.h $PACKAGE_FOLDER
        pushd $PACKAGE_FOLDER > /dev/null
        tar -czvf $GITHUB_WORKSPACE/lp_solve_${{ env.LP_VERSION }}_dev_${{ env.PLATFORM_FOLDER }}.tar.gz *

    - name: Build lp_solve_${{ env.LP_VERSION }}_exe_${{ env.PLATFORM_FOLDER }}.tar.gz
      run: |
        set -v # echo commands

        PACKAGE_FOLDER=output/exe_${{ env.PLATFORM_FOLDER }}
        mkdir -p $PACKAGE_FOLDER
        PACKAGE_FOLDER=$( realpath $PACKAGE_FOLDER )

        for i in bfp/bfp_GLPK bfp/bfp_etaPFI bfp/bfp_LUSOL xli/xli_CPLEX xli/xli_LINDO xli/xli_MPS xli/xli_XPRESS lp_solve
        do
            echo "Building $i"
            pushd $i > /dev/null
            sh ccc
            if [ "$i" = "lp_solve" ]; then
                cp bin/${{ env.PLATFORM_FOLDER }}/lp_solve $PACKAGE_FOLDER
            else
                cp bin/${{ env.PLATFORM_FOLDER }}/*.so $PACKAGE_FOLDER
            fi
            popd > /dev/null
        done

        pushd $PACKAGE_FOLDER > /dev/null
        tar -czvf $GITHUB_WORKSPACE/lp_solve_${{ env.LP_VERSION }}_exe_${{ env.PLATFORM_FOLDER }}.tar.gz *

    - name: Build lp_solve_${{ env.LP_VERSION }}_FreeMat_exe_${{ env.PLATFORM_FOLDER }}.tar.gz
      run: |
        set -v # echo commands

        pushd extra/FreeMat > /dev/null
        sh gen
        popd

        tar -czf \
            $GITHUB_WORKSPACE/lp_solve_${LP_VERSION}_FreeMat_exe_${PLATFORM_FOLDER}.tar.gz \
            --transform 's,extra/FreeMat/,,' \
            --transform 's,extra/man/,,' \
            --exclude=fmlpsolve.m \
            extra/FreeMat/*.m \
            extra/FreeMat/changes \
            extra/FreeMat/fmlpsolve.so \
            extra/FreeMat/README.txt \
            extra/man/FreeMat.htm
            
    - name: Build lp_solve_${{ env.LP_VERSION }}_MATLAB_exe_${{ env.PLATFORM_FOLDER }}.tar.gz
      if: false # C build fails with "cc: fatal error: cannot execute ‘cc1obj’: posix_spawnp: No such file or directory"
      run: |
        set -v # echo commands

        pushd extra/MATLAB/lpsolve > /dev/null
        make # cc: fatal error: cannot execute ‘cc1obj’: posix_spawnp: No such file or directory
        popd

        tar -czf \
            $GITHUB_WORKSPACE/lp_solve_${LP_VERSION}_MATLAB_exe_${PLATFORM_FOLDER}.tar.gz \
            --transform 's,extra/MATLAB/lpsolve/,,' \
            --transform 's,extra/man/,,' \
            --exclude=mxlpsolve.m \
            --exclude=Makefile.m \
            extra/MATLAB/lpsolve/*.m \
            extra/MATLAB/lpsolve/mxlpsolve.mex* \
            extra/MATLAB/lpsolve/changes \
            extra/MATLAB/lpsolve/README.txt \
            extra/man/MATLAB.htm 

    - name: Build lp_solve_${{ env.LP_VERSION }}_octave_exe_${{ env.PLATFORM_FOLDER }}.tar.gz
      run: |
        set -v # echo commands

        pushd extra/octave/lpsolve > /dev/null
        sh ccc
        popd

        tar -czf \
            $GITHUB_WORKSPACE/lp_solve_${LP_VERSION}_octave_exe_${PLATFORM_FOLDER}.tar.gz \
            --transform 's,extra/octave/lpsolve/,,' \
            --transform 's,extra/man/,,' \
            --exclude=octlpsolve.m \
            extra/octave/lpsolve/*.m \
            extra/octave/lpsolve/octlpsolve.oct \
            extra/octave/lpsolve/changes \
            extra/octave/lpsolve/README.txt \
            extra/man/octave.htm

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PLATFORM_FOLDER }}
        compression-level: 0 # no compression - already compressed
        path: |
          *.tar.gz

  build-ux32:
    needs: determine-version
    runs-on: ubuntu-latest

    env:
      LP_VERSION: ${{ needs.determine-version.outputs.LP_VERSION }}
      PLATFORM_FOLDER: 'ux32'
      CC: "i686-linux-gnu-gcc -m32"
      # set glpkdir to where glpk is located, used in bfp/bfp_GLPK/ccc
      glpkdir: ${{ github.workspace }}/dependencies/glpk

    steps:

    - name: Install 32-bit toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y \
            gcc-i686-linux-gnu \
            binutils-i686-linux-gnu \
            octave-dev

    - name: Checkout
      uses: actions/checkout@v5

    # after checkout otherwise folder is not empty
    - name: Install missing build dependencies
      run: |
        set -v # echo commands
        
        # bfp/bfp_GLPK/ccc expects glpk to be installed in dependencies/glpk
        mkdir -p $glpkdir
        curl -s -L https://slackware.cs.utah.edu/pub/gnu/glpk/glpk-4.13.tar.gz | tar -xvz -C $glpkdir --strip-components=1

    - name: Build lp_solve_${{ env.LP_VERSION }}_dev_${{ env.PLATFORM_FOLDER }}.tar.gz
      run: |
        set -v # echo commands
        
        PACKAGE_FOLDER=output/dev_${{ env.PLATFORM_FOLDER }}
        mkdir -p $PACKAGE_FOLDER
        PACKAGE_FOLDER=$( realpath $PACKAGE_FOLDER )

        pushd lpsolve55 > /dev/null
        echo "Building lpsolve55 library for platform ${{ env.PLATFORM_FOLDER }}"
        sh ccc
        cp bin/${{ env.PLATFORM_FOLDER }}/* $PACKAGE_FOLDER
        popd > /dev/null

        echo "Packaging lpsolve55 library for platform ${{ env.PLATFORM_FOLDER }}"
        cp lp_Hash.h lp_lib.h lp_matrix.h lp_mipbb.h lp_SOS.h lp_types.h lp_utils.h $PACKAGE_FOLDER
        pushd $PACKAGE_FOLDER > /dev/null
        tar -czvf $GITHUB_WORKSPACE/lp_solve_${{ env.LP_VERSION }}_dev_${{ env.PLATFORM_FOLDER }}.tar.gz *

    - name: Build lp_solve_${{ env.LP_VERSION }}_exe_${{ env.PLATFORM_FOLDER }}.tar.gz
      run: |
        set -v # echo commands

        PACKAGE_FOLDER=output/exe_${{ env.PLATFORM_FOLDER }}
        mkdir -p $PACKAGE_FOLDER
        PACKAGE_FOLDER=$( realpath $PACKAGE_FOLDER )

        for i in bfp/bfp_GLPK bfp/bfp_etaPFI bfp/bfp_LUSOL xli/xli_CPLEX xli/xli_LINDO xli/xli_MPS xli/xli_XPRESS lp_solve
        do
            echo "Building $i"
            pushd $i > /dev/null
            sh ccc
            if [ "$i" = "lp_solve" ]; then
                cp bin/${{ env.PLATFORM_FOLDER }}/lp_solve $PACKAGE_FOLDER
            else
                cp bin/${{ env.PLATFORM_FOLDER }}/*.so $PACKAGE_FOLDER
            fi
            popd > /dev/null
        done

        pushd $PACKAGE_FOLDER > /dev/null
        tar -czvf $GITHUB_WORKSPACE/lp_solve_${{ env.LP_VERSION }}_exe_${{ env.PLATFORM_FOLDER }}.tar.gz *

    - name: Build lp_solve_${{ env.LP_VERSION }}_AMPL_exe_${{ env.PLATFORM_FOLDER }}.tar.gz
      if: false # C build fails with "fatal error: patchlevel.h: No such file or directory"
      run: |
        set -v # echo commands

        pushd extra/AMPL/lpsolve > /dev/null
        make makefile.u # Fails with fatal error: patchlevel.h: No such file or directory
        popd

        tar -czf \
            $GITHUB_WORKSPACE/lp_solve_${{ env.LP_VERSION }}_AMPL_exe_${{ env.PLATFORM_FOLDER }}.tar.gz \
            --transform 's,extra/AMPL/lpsolve/,,' \
            --transform 's,extra/man/,,' \
            extra/AMPL/lpsolve/lpsolve \
            extra/AMPL/lpsolve/changes \
            extra/AMPL/lpsolve/README \
            extra/man/AMPL.htm

    - name: Build lp_solve_${{ env.LP_VERSION }}_FreeMat_exe_${{ env.PLATFORM_FOLDER }}.tar.gz
      run: |
        set -v # echo commands

        pushd extra/FreeMat > /dev/null
        sh gen
        popd

        tar -czf \
            $GITHUB_WORKSPACE/lp_solve_${LP_VERSION}_FreeMat_exe_${PLATFORM_FOLDER}.tar.gz \
            --transform 's,extra/FreeMat/,,' \
            --transform 's,extra/man/,,' \
            --exclude=fmlpsolve.m \
            extra/FreeMat/*.m \
            extra/FreeMat/changes \
            extra/FreeMat/fmlpsolve.so \
            extra/FreeMat/README.txt \
            extra/man/FreeMat.htm
            
    - name: Build lp_solve_${{ env.LP_VERSION }}_MATLAB_exe_${{ env.PLATFORM_FOLDER }}.tar.gz
      if: false # C build fails with "cc: fatal error: cannot execute ‘cc1obj’: posix_spawnp: No such file or directory"
      run: |
        set -v # echo commands

        pushd extra/MATLAB/lpsolve > /dev/null
        make # cc: fatal error: cannot execute ‘cc1obj’: posix_spawnp: No such file or directory
        popd

        tar -czf \
            $GITHUB_WORKSPACE/lp_solve_${LP_VERSION}_MATLAB_exe_${PLATFORM_FOLDER}.tar.gz \
            --transform 's,extra/MATLAB/lpsolve/,,' \
            --transform 's,extra/man/,,' \
            --exclude=mxlpsolve.m \
            --exclude=Makefile.m \
            extra/MATLAB/lpsolve/*.m \
            extra/MATLAB/lpsolve/mxlpsolve.mex* \
            extra/MATLAB/lpsolve/changes \
            extra/MATLAB/lpsolve/README.txt \
            extra/man/MATLAB.htm 

    - name: Build lp_solve_${{ env.LP_VERSION }}_octave_exe_${{ env.PLATFORM_FOLDER }}.tar.gz
      run: |
        set -v # echo commands

        pushd extra/octave/lpsolve > /dev/null
        sh ccc
        popd

        tar -czf \
            $GITHUB_WORKSPACE/lp_solve_${LP_VERSION}_octave_exe_${PLATFORM_FOLDER}.tar.gz \
            --transform 's,extra/octave/lpsolve/,,' \
            --transform 's,extra/man/,,' \
            --exclude=octlpsolve.m \
            extra/octave/lpsolve/*.m \
            extra/octave/lpsolve/octlpsolve.oct \
            extra/octave/lpsolve/changes \
            extra/octave/lpsolve/README.txt \
            extra/man/octave.htm

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PLATFORM_FOLDER }}
        compression-level: 0 # no compression - already compressed
        path: |
          *.tar.gz

  package-sources-and-extra-folder:
    if: false # temporarily disable while testing other build parts
    needs: determine-version
    runs-on: ubuntu-latest

    env:
      LP_VERSION: ${{ needs.determine-version.outputs.LP_VERSION }}

    steps:

    - name: Checkout
      uses: actions/checkout@v5

    - name: Package sources
      run: |
        set -v # echo commands
        
        PACKAGE_FINAL_FOLDER=$GITHUB_WORKSPACE/output
        mkdir -p $PACKAGE_FINAL_FOLDER

        # full source
        echo "Packaging lp_solve_${LP_VERSION}_source.tar.gz"
        tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_source.tar.gz \
            --transform 's,^,lp_solve/,' \
            --exclude-vcs \
            --exclude-vcs-ignores \
            --exclude=output \
            --exclude=xli \
            --exclude=extra \
            --exclude=.github \
            --exclude=bfp/bfp_etaPFI \
            --exclude=bfp/bfp_GLPK \
            *

        # bfp_*
        for i in etaPFI GLPK LUSOL
        do
          echo "Packaging lp_solve_${LP_VERSION}_bfp_${i}_source.tar.gz"
          tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_bfp_${i}_source.tar.gz \
              --transform 's,^,lp_solve/,' \
              --exclude-vcs-ignores \
              bfp/bfp_${i} \
              bfp/*.*
        done

        # xli_*
        for i in CPLEX LINDO LPFML MathProg MPS XPRESS
        do
          echo "Packaging lp_solve_${LP_VERSION}_xli_${i}_source.tar.gz"
          tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_xli_${i}_source.tar.gz \
              --transform 's,^,lp_solve/,' \
              --exclude-vcs-ignores \
              xli/xli_${i} \
              xli/*.*
        done

        # xli_DIMACS
        echo "Packaging lp_solve_${LP_VERSION}_xli_DIMACS_source.tar.gz"
        tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_xli_DIMACS_source.tar.gz \
            --transform "s,^extra/man,xli/xli_DIMACS," \
            --transform 's,^,lp_solve/,' \
            --exclude-vcs-ignores \
            xli/xli_DIMACS \
            xli/*.* \
            extra/man/DIMACS_*.htm \
            extra/man/dimacs_*.gif
        
        # some from extra (those without specificities)
        for i in Euler FreeMat PHP Python Sysquake
        do
          echo "Packaging lp_solve_${LP_VERSION}_${i}_source.tar.gz"
          tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_${i}_source.tar.gz \
              --transform "s,^extra/man,extra/${i}," \
              --transform 's,^,lp_solve/,' \
              --exclude-vcs-ignores \
              extra/${i} \
              extra/man/${i}.htm
        done

        # extra: AMPL
        echo "Packaging lp_solve_${LP_VERSION}_AMPL_source.tar.gz"
        tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_AMPL_source.tar.gz \
            --transform "s,^extra/man,extra/AMPL/solvers/lpsolve," \
            --transform 's,^,lp_solve/,' \
            --exclude-vcs-ignores \
            extra/AMPL/solvers \
            extra/man/AMPL.htm

        # extra: c
        echo "Packaging lp_solve_${LP_VERSION}_c.tar.gz"
        pushd extra/c > /dev/null
        tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_c.tar.gz \
            --exclude-vcs-ignores \
            --exclude=lp.lp \
            *
        popd > /dev/null

        # extra: man => doc
        echo "Packaging lp_solve_${LP_VERSION}_doc.tar.gz"
        pushd extra/man > /dev/null
        tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_doc.tar.gz \
            --exclude-vcs-ignores \
            --exclude=arv \
            --exclude=Win32 \
            --exclude=*.bat \
            --exclude=BuildLog.htm \
            --exclude=HTMLHelp.* \
            --exclude=lp_solve.hh* \
            --exclude=man.* \
            --exclude=man0.* \
            *
        popd > /dev/null

        # extra/MATLAB
        echo "Packaging lp_solve_${LP_VERSION}_MATLAB_source.tar.gz"
        tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_MATLAB_source.tar.gz \
            --transform "s,^extra/man,extra/MATLAB/lpsolve," \
            --transform 's,^,lp_solve/,' \
            --exclude-vcs-ignores \
            extra/MATLAB \
            extra/man/MATLAB.htm

        # extra/octave
        echo "Packaging lp_solve_${LP_VERSION}_octave_source.tar.gz"
        tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_octave_source.tar.gz \
            --transform "s,^extra/man/octave.htm,extra/octave/lpsolve/Octave.htm," \
            --transform 's,^,lp_solve/,' \
            --exclude-vcs-ignores \
            extra/octave \
            extra/man/octave.htm

        # extra/O-MATRIX
        echo "Packaging lp_solve_${LP_VERSION}_OMATRIX_source.tar.gz"
        tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_OMATRIX_source.tar.gz \
            --transform "s,^extra/man,extra/O-MATRIX/lpsolve," \
            --transform 's,^,lp_solve/,' \
            --exclude-vcs-ignores \
            extra/O-MATRIX \
            extra/man/O-Matrix.htm

        # extra/scilab
        echo "Packaging lp_solve_${LP_VERSION}_scilab_source.tar.gz"
        tar -czf $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_scilab_source.tar.gz \
            --transform "s,^extra/man/Scilab.htm,extra/scilab/lpsolve/man/scilab.htm," \
            --transform 's,^,lp_solve/,' \
            --exclude-vcs-ignores \
            extra/scilab \
            extra/man/Scilab.htm

        # extra: many with zip
        for i in Access cs.net VB.NET
        do
          echo "Packaging lp_solve_${LP_VERSION}_${i,,}_source.zip"
          pushd extra/${i} > /dev/null
          # ${i,,} makes the name lowercase
          zip -q $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_${i,,}.zip *
          popd > /dev/null
        done

        # extra Delphi
        echo "Packaging lp_solve_${LP_VERSION}_Delphi.zip"
        pushd extra/Delphi > /dev/null
        zip -q $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_Delphi.zip cppc.bat demo.dpr lp.lp lpsolve.inc lpsolve.pas
        popd > /dev/null

        # extra Excel
        echo "Packaging lp_solve_${LP_VERSION}_excel.zip"
        pushd extra/Excel > /dev/null
        zip -q $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_excel.zip demo.xls
        popd > /dev/null

        # extra: IDE
        echo "Packaging lp_solve_${LP_VERSION}_IDE_source.zip"
        pushd extra/LPSolveIDE/IDE15 > /dev/null
        zip -q \
            $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_IDE_source.zip \
            InnoSetup/L* \
            *.*
        popd > /dev/null

        # extra: java
        echo "Packaging lp_solve_${LP_VERSION}_java.zip"
        pushd extra > /dev/null
        zip -qrD \
            $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_java.zip \
            lp_solve_5.5_java/demo \
            lp_solve_5.5_java/demo2 \
            lp_solve_5.5_java/docs \
            lp_solve_5.5_java/lib \
            lp_solve_5.5_java/src \
            lp_solve_5.5_java/CHANGES.txt \
            lp_solve_5.5_java/LGPL \
            lp_solve_5.5_java/README.html \
            -x '*.class' \
            -x '*.log'
        popd > /dev/null

        # extra: MSF
        echo "Packaging lp_solve_${LP_VERSION}_MSF_source.zip"
        pushd "extra/MSF" > /dev/null
        zip -qr \
            $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_MSF_source.zip \
            *
        popd > /dev/null

        # extra MSF_Demo
        echo "Packaging lp_solve_${LP_VERSION}_MSF_demo.zip"
        pushd "extra/MSF 3.0/demo" > /dev/null
        zip -qr \
            $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_MSF_demo.zip \
            *
        popd > /dev/null

        # extra: vb
        echo "Packaging lp_solve_${LP_VERSION}_vb.zip"
        pushd "extra/vb" > /dev/null
        zip -q \
            $PACKAGE_FINAL_FOLDER/lp_solve_${LP_VERSION}_vb.zip \
            Module1.bas \
            lpsolve55.cls \
            demo.vbp
        popd > /dev/null

    # TODO:
    #   Did not do extra/COM as it is missing lpsolve55COM.dll which we probably need to build
    #   This generates an *_MSF_demo.zip like version 5.5.2.11 had but 5.5.2.14 does not have

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sources
        compression-level: 0 # no compression - already compressed
        path: |
          output/*.tar.gz
          output/*.zip

  collect-all-artifacts:
    if: false # temporarily disable while testing other build parts
    runs-on: ubuntu-latest
    needs:
      - build-ux64
      - build-ux32
      - package-sources-and-extra-folder
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: release-files
          delete-merged: true
          compression-level: 0 # no compression - already compressed